@page "/tasker/edit/{id:guid}"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using NEWWEBAPP.Client.Services.Interfaces
@inject ITaskerItemService _TaskerItemService
@inject IJSRuntime _JsRunTime
@inject NavigationManager NavigationManager
@rendermode InteractiveWebAssembly


@if(taskerItem is not null)
{
    <div class="h-100 d-flex flex-column justify-content-center">
        <div class="card">
            <div class="card-body">
                <h3 class="card-title">Edit Tasker Item</h3>
                <EditForm Model="taskerItem" OnValidSubmit="HandleSubmit">
                    <DataAnnotationsValidator/>

                    <div class="hstack gap-2">
                        <InputCheckbox class="form-check-input" @bind-Value="taskerItem.IsComplete"/>

                        <InputText class="form-control" @bind-Value="taskerItem.Name" placeholder="Enter a task to complete..."/>

                        <button type="submit" class="btn btn-primary btn-sm">
                            <i class="bi bi-check"></i>
                        </button>
                    </div>
                    <ValidationSummary/>
                    <span class="text-danger">@errorMessage</span>
                </EditForm>
            </div>
        </div>
    </div>
}
else
{
    <div class="text-center">
        <h3>Uh oh!</h3>
        <p>That tasker item could not be found</p>
        </div>
    

}

@code {

    private UserInfo? userInfo;

    [CascadingParameter]

    private Task<AuthenticationState>? AuthStateTask { get; set; }

    [Parameter] //from page route
    public Guid Id { get; set; }

    private TaskerItemDTO? taskerItem;
    string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);
        // get the tasker item we want to edit\
        try
        {
            taskerItem = await _TaskerItemService.GetTaskerItemByIdAsync(Id);
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex);
            taskerItem = null;
        }
    }

    private async Task HandleSubmit()
    {
        try
        {
            errorMessage = string.Empty;
            await _TaskerItemService.UpdateTaskerItemAsync(Id, taskerItem!, userInfo!.UserId);
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex);
            errorMessage = "An error occured while trying to update this item";
        }

        if (errorMessage == string.Empty)
        {
            NavigationManager.NavigateTo("/tasker");
        }
    }
}
